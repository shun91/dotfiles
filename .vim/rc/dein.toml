[[plugins]]
# パッケージ管理
repo = 'Shougo/dein.vim'

[[plugins]]
# 自動補完
repo = 'Shougo/neocomplcache'
hook_add = ''' " {{{
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplcache.
  let g:neocomplcache_enable_at_startup = 1
  " Use smartcase.
  let g:neocomplcache_enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
  " カーソル移動で作動しないようにする。
  let g:neocomplcache_enable_insert_char_pre = 1
  " Define dictionary.
  let g:neocomplcache_dictionary_filetype_lists = {
      \ 'default' : ''
      \ }
  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplcache#undo_completion()
  inoremap <expr><C-l>     neocomplcache#complete_common_string()
  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
      return neocomplcache#smart_close_popup() . "\<CR>"
    endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplcache#close_popup()
  inoremap <expr><C-e>  neocomplcache#cancel_popup()
''' # }}}

[[plugins]]
# スニペットによる自動補完
repo = 'Shougo/neosnippet.vim'
depends = ['Shougo/neocomplcache']
hook_add = ''' " {{{
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " スニペットが選択されてる場合、Enterキーで展開
  " http://qiita.com/muran001/items/4a8ffafb9c6564313893
  imap <expr><CR> neosnippet#expandable() <bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? neocomplcache#smart_close_popup() : "\<CR>"
  imap <expr><TAB> neosnippet#jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

  " 自作 snippet ファイルのパス
  let g:neosnippet#snippets_directory = '~/.vim/snippets/'
''' # }}}

[[plugins]]
# スニペットの定義集
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
# Vimからブラウザを開く
repo = 'tyru/open-browser.vim'

[[plugins]]
# ステータスラインのデコレート
repo = 'itchyny/lightline.vim'

[[plugins]]
# インデントに色をつけて見やすく
repo = 'nathanaelkane/vim-indent-guides'
hook_add = ''' " {{{
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
  let g:indent_guides_color_change_percent = 30
  let g:indent_guides_guide_size = 1
''' # }}}

[[plugins]]
# コメントアウトのトグル
repo = 'tomtom/tcomment_vim'

[[plugins]]
# Vim上でプログラムの実行
repo = 'thinca/vim-quickrun'
hook_add = ''' " {{{
  let g:quickrun_config = {
  \   "_"    : {
  \       'split' : 'botright 8sp'
  \   },
  \   "html" : {
  \       'command' : 'open',
  \       'exec' : '%c %s',
  \       'outputter' : 'error',
  \       'outputter/error/success' : 'null'
  \   },
  \   "markdown" : {
  \       'command' : 'PrevimOpen',
  \       'exec' : '%c',
  \       'outputter' : 'browser',
  \   }
  \}
''' # }}}

[[plugins]]
# ファイルタイプにあったコメントアウトを挿入
repo = 'tyru/caw.vim'
hook_add = ''' " {{{
  " コメントの追加・削除を行なう
  nmap <Leader>/ <Plug>(caw:zeropos:toggle)
  vmap <Leader>/ <Plug>(caw:zeropos:toggle)
''' # }}}

[[plugins]]
# ファイルエクスプローラー
repo = 'scrooloose/nerdtree'
hook_add = ''' " {{{
  " ブックマークを初期表示
  let g:NERDTreeShowBookmarks=1

  " 隠しファイルも表示
  let NERDTreeShowHidden = 1

  " NERDTreeTabsを初期表示
  let g:nerdtree_tabs_open_on_console_startup=1

  " Ctrl+nでNERDTreeを表示
  map <C-n> <plug>NERDTreeTabsToggle<CR>

  " NERDTress File highlighting
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
   exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
   exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
  call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
  call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
  call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
  call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')

  " ディレクトリ表示記号を変更する
  let g:NERDTreeDirArrows = 1
  let g:NERDTreeDirArrowExpandable  = '▶'
  let g:NERDTreeDirArrowCollapsible = '▼'
''' # }}}

[[plugins]]
# 全てのタブでnerdtreeウインドウを共有
repo = 'jistr/vim-nerdtree-tabs'
