########################################
# 補完系
########################################
[[plugins]]
# 閉じカッコなどの自動補完
repo = 'kana/vim-smartinput'
on_i = 1
hook_post_source = ''' " {{{
  " 他の<CR> <BS>などのマッピングと共存させる
  " \<CR> は <Plug>(smartinput_CR) に置き換える（BSも同様）
  " http://qiita.com/todashuta/items/bdad8e28843bfb3cd8bf
  call smartinput#map_to_trigger('i', '<Plug>(smartinput_BS)',
        \                        '<BS>',
        \                        '<BS>')
  call smartinput#map_to_trigger('i', '<Plug>(smartinput_C-h)',
        \                        '<BS>',
        \                        '<C-h>')
  call smartinput#map_to_trigger('i', '<Plug>(smartinput_CR)',
        \                        '<Enter>',
        \                        '<Enter>')
''' # }}}

[[plugins]]
# シンタックス補完・バッファ補完・ファイル補完など
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = ''' " {{{
  "Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      " jQueryの辞書（別にプラグイン入れてるので、そこを参照する）
      \ 'javascript' : $HOME.'/.cache/dein/repos/github.com/ryuzee/vim-jquery-dict/dict/jquery.dict',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
          \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<Plug>(smartinput_CR)"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<Plug>(smartinput_CR)"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  imap <expr><C-h> neocomplete#smart_close_popup()."\<Plug>(smartinput_C-h)"
  imap <expr><BS> neocomplete#smart_close_popup()."\<Plug>(smartinput_C-h)"
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior(not recommended).
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
''' # }}}

[[plugins]]
# neocompleteのシンタックス補完用のキャッシュ生成
repo = 'Shougo/neco-syntax'
on_i = 1

[[plugins]]
# スニペット補完
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']
hook_post_source = ''' " {{{
  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  " 自作 snippet ファイルのパス
  let g:neosnippet#snippets_directory = '~/.vim/snippets/'

  " スニペットが選択されてる場合、Enterキーで展開
  imap <expr><CR> neosnippet#expandable() <bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? neocomplete#smart_close_popup() : "\<Plug>(smartinput_CR)"
''' # }}}

[[plugins]]
# neosnippetのスニペット集
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
# コメントアウトのトグル
repo = 'tomtom/tcomment_vim'
on_i = 1

[[plugins]]
# ファイルタイプにあったコメントアウトを挿入
repo = 'tyru/caw.vim'
on_i = 1
hook_add = ''' " {{{
  " コメントの追加・削除を行なう
  nmap <Leader>/ <Plug>(caw:zeropos:toggle)
  vmap <Leader>/ <Plug>(caw:zeropos:toggle)
''' # }}}

########################################
# HTML
########################################

[[plugins]]
# HTML5のシンタックスハイライト
repo = 'othree/html5.vim'
on_ft = ['html']

########################################
# CSS
########################################

[[plugins]]
# CSS3のシンタックスハイライト
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'less', 'sass']

########################################
# PHP
########################################

[[plugins]]
# 関数説明のある補完用辞書
repo = 'violetyk/neocomplete-php.vim'
on_i = 1
on_ft = ['php']
hook_add = '''
  let g:neocomplete_php_locale = 'ja'
'''

########################################
# Javascript
########################################

[[plugins]]
# JSのシンタックスハイライト
repo = 'jelera/vim-javascript-syntax'
on_ft = ['javascript']

[[plugins]]
# jQueryの辞書補完
repo = 'ryuzee/vim-jquery-dict'
on_i = 1
on_ft = ['javascript']

########################################
# Python
########################################

[[plugins]]
# pep8による自動修正
repo = 'tell-k/vim-autopep8'
on_ft = ['python']
hook_add = ''' " {{{
  function! Preserve(command)
      " Save the last search.
      let search = @/
      " Save the current cursor position.
      let cursor_position = getpos('.')
      " Save the current window position.
      normal! H
      let window_position = getpos('.')
      call setpos('.', cursor_position)
      " Execute the command.
      execute a:command
      " Restore the last search.
      let @/ = search
      " Restore the previous window position.
      call setpos('.', window_position)
      normal! zt
      " Restore the previous cursor position.
      call setpos('.', cursor_position)
  endfunction

  function! Autopep8()
      call Preserve(':silent %!autopep8 -')
  endfunction

  autocmd FileType python nnoremap <S-f> :call Autopep8()<CR>
''' # }}}

########################################
# Markdown
########################################

[[plugins]]
# Markdownのシンタックスハイライト
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

[[plugins]]
# Markdownのプレビュー
repo = 'kannokanno/previm'
on_ft = ['markdown']
hook_add = ''' " {{{
  let g:previm_open_cmd = 'open'
''' # }}}
